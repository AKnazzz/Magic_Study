package org.tinkoff.task_3;


import java.util.Scanner;

/**
 * Виктория рассматривает занимательную квадратную двумерную матрицу, которая состоит только из натуральных чисел.
 * Она то и дело суммирует числа в столбцах и строках.
 * Виктория называет пару строки-столбца интересными, если сумма чисел в строке отличается от суммы чисел в столбце не более чем на величину числа на пересечении этих строки и столбца.
 *
 * Найдите количество интересных пар строка-столбец во всей матрице.
 *
 * Формат входных данных:
 * В первой строке дано число n (1 <= n <= 1000) — размер квадратной матрицы.
 * В последующих n строках задано описание матрицы по n целых неотрицательных чисел в каждой.
 * Элементы матрицы a (i,j) лежат в диапазоне ( 0 <= a (i,j) <= 100000).
 *
 * Формат выходных данных:
 * Выведите количество искомых пар.
 */

/*
Для решения задачи о нахождении интересных пар "строка-столбец" в квадратной матрице, мы можем воспользоваться следующим подходом:

1. Считать входные данные: Прочитать размер матрицы n и саму матрицу.
2. Вычислить суммы строк и столбцов: Создать два массива для хранения сумм строк и сумм столбцов.
3. Проверить условия интересности: Для каждой пары (строка, столбец) проверить, удовлетворяет ли она условию интересности, и подсчитать такие пары.

### Алгоритм

1. Прочитать размер матрицы n.
2. Считать элементы матрицы и одновременно вычислить суммы строк и столбцов.
3. Для каждой пары (i, j) проверить, выполняется ли:
   [ {sum_row}[i] - {sum_col}[j] <= a[i][j] ]
4. Подсчитать количество таких пар.

 */

public class InterestingPairs {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Чтение размера матрицы
        int n = scanner.nextInt();

        // Инициализация матрицы и массивов для сумм
        int[][] matrix = new int[n][n];
        long[] sumRow = new long[n];
        long[] sumCol = new long[n];

        // Чтение матрицы и вычисление сумм строк и столбцов
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = scanner.nextInt();
                sumRow[i] += matrix[i][j];
                sumCol[j] += matrix[i][j];
            }
        }

        // Подсчет интересных пар
        int interestingPairsCount = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (Math.abs(sumRow[i] - sumCol[j]) <= matrix[i][j]) {
                    interestingPairsCount++;
                }
            }
        }

        // Вывод результата
        System.out.println(interestingPairsCount);

        scanner.close();
    }
}

//### Объяснение кода:
//
//1. **Считывание данных**: Мы используем Scanner для считывания размера матрицы и ее элементов.
//2. **Суммы строк и столбцов**: Два массива sumRow и sumCol используются для хранения сумм строк и столбцов соответственно.
//3. **Проверка условия**: Два вложенных цикла проходят по всем парам (i, j), проверяя условие интересности и увеличивая счетчик interestingPairsCount, если условие выполняется.
//4. **Вывод результата**: В конце выводится общее количество интересных пар.
//
//### Сложность алгоритма:
//- **Временная сложность**: \\( O(n^2) \\), так как мы проходим по всем элементам матрицы дважды (один раз для вычисления сумм и один раз для проверки условий).
//- **Пространственная сложность**: \\( O(n) \\) для хранения сумм строк и столбцов.