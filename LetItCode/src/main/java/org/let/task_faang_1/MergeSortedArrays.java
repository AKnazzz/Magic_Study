package org.let.task_faang_1;

/**
 * Задача — Объединяем массивы
 * <p>
 * Даны 2 целочисленных массива nums1 и nums2, они отсортированы в неубывающем порядке.
 * И 2 числа m и n, которые представляют количество элементов массивов nums1 и nums2 соответственно.
 * <p>
 * Объедините nums1 и nums2 в один массив, элементы которого отсортированы в неубывающем порядке.
 * <p>
 * Конечный отсортированный массив не должен быть возвращен функцией, а вместо этого должен храниться внутри массива nums1.
 * В связи с этим, nums1 имеет длину m + n, где первые m элементов обозначают элементы, которые должны быть объединены,
 * а последние n элементов имеют значение 0 и должны игнорироваться.
 */

public class MergeSortedArrays {

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // Указатели для nums1 и nums2
        int i = m - 1; // последний элемент первого массива
        int j = n - 1; // последний элемент второго массива
        int k = m + n - 1; // последний индекс для записи в nums1

        // Объединяем массивы с конца
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k] = nums1[i];
                i--;
            } else {
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        }

        // Если остались элементы в nums2, копируем их
        while (j >= 0) {
            nums1[k] = nums2[j];
            j--;
            k--;
        }

        // Элементы из nums1 уже на месте, если остались элементы в nums1, они уже отсортированы
    }

    public static void main(String[] args) {
        MergeSortedArrays solution = new MergeSortedArrays();

        int[] nums1 = {1, 2, 3, 0, 0, 0}; // массив nums1 с дополнительными нулями
        int m = 3; // количество элементов в nums1
        int[] nums2 = {2, 5, 6}; // массив nums2
        int n = 3; // количество элементов в nums2

        solution.merge(nums1, m, nums2, n);

        // Выводим объединенный массив
        System.out.print("Объединенный массив: ");
        for (int num : nums1) {
            System.out.print(num + " ");
        }
    }
}


/*
### Объяснение кода:
1. **Метод merge**:
   - Устанавливаются три указателя:
     - i указывает на последний элемент в nums1 (не считая нулей).
     - j указывает на последний элемент в nums2.
     - k указывает на последний индекс в nums1, куда мы будем записывать объединенные элементы.
   - Сравниваем элементы nums1[i] и nums2[j] и записываем больший из них в nums1[k]. Затем уменьшаем соответствующий указатель (i или j) и k.
   - Если элементы в nums2 остались (т.е. j >= 0), то копируем их в nums1. Элементы из nums1, которые остались, уже находятся на своих местах.

2. **Метод main**: Пример использования метода с заданными массивами и вывод результата.

Этот алгоритм работает за линейное время O(m + n) и использует O(1) дополнительной памяти.
 */
