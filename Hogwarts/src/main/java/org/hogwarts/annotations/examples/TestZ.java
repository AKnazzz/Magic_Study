package org.hogwarts.annotations.examples;

public class TestZ {
    public static void main(String[] args) {
        Parent p = new Child("Boris");
        p.showInfo();
    }
}

class Parent {
    String name;

    public Parent(String name) {
        this.name = name;
    }

    // ===> Аннотация @Deprecated ставится над элементами программы (классами, методами, полями и т.д.),
    //      которые устарели и не рекомендуется использовать в новом коде.
    //
    // ===> Компилятор воспринимает эту аннотацию как предупреждение о том, что использование помеченного элемента
    //      может привести к проблемам в будущем, так как он может быть удален или изменен в следующих версиях программы.
    //
    // ===> Ставить аннотацию @Deprecated не обязательно, но это рекомендуется для уведомления других разработчиков о том,
    //      что элемент устарел и не должен использоваться в новом коде. Также это помогает при обновлении программы, чтобы избежать ошибок из-за использования устаревших элементов.

    @Deprecated
    void showInfo() {
        System.out.println("Its Parent class. Name is = " + name);
    }
}

class Child extends Parent {
    public Child(String name) {
        super(name);
    }


// ===> Аннотация @Override указывает компилятору, что метод, помеченный этой аннотацией, переопределяет метод из суперкласса или интерфейса.
//      Это помогает избежать ошибок в написании методов, которые должны переопределяться.

// ===> Компилятор воспринимает эту аннотацию как подсказку для проверки корректности переопределения метода.
//      Если метод не переопределяет ни один метод из суперкласса или интерфейса, компилятор выдаст ошибку компиляции.

    // ===> Хотя использование @Override не является обязательным, это хорошая практика программирования,
//      которая помогает избежать ошибок и улучшить читаемость кода.
    @Override
    void showInfo() {
        System.out.println("Its Child class. Name is = " + name);
    }
}
